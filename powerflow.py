'''
潮流计算程序  单机无穷大系统
参考文献：电力系统计算
计算格式：直角坐标潮流方程
1 节点功率方程式
I=YU
节点功率与节点电流  
Si = Ui*conj(Ii) 即 Si = Ui*conj(∑YijUi)
Si= Pi+jQi
Ui=ei+jfi
Yij=Gij+jBij
带入得
Pi+jQi = Ui*conj(∑YijUj) = (ei+jfi)*∑(Gij-jBij)(ej-jfj)
=(ei+jfi)*∑[ (Gij-jBij)*ej-(Gij-jBij)*jfj ]
=(ei+jfi)*∑[ (Gij*ej-Bij*fj)-j(Bij*ej+Gij*fj) ]
=ei∑(Gij*ej-Bij*fj)+fi∑(Bij*ej+Gij*fj)+j[ fi∑(Gij*ej-Bij*fj)-ei∑(Bij*ej+Gij*fj) ]
Pi = ei∑(Gij*ej-Bij*fj)+fi∑(Bij*ej+Gij*fj)
Qi = fi∑(Gij*ej-Bij*fj)-ei∑(Bij*ej+Gij*fj) 
当采用直角坐标时，潮流问题的待求量为各节点电压的实部和虚部两个分量e1,f1,e2,f2......，由于平衡节点电压向量是
给定的，因此待求量是2(n-1)个,需要2(n-1)个方程式。
那么对于两点的单机无穷大系统，电网点是平衡节点，那么只剩下了一个PQ节点。那就是只是2个方程，两个未知数。
取平衡节点为j=0,发电机节点是PQ节点，为i=1
修正功率方程为
dP1        dP1/de1  dP1/df1    de1 
dQ1        dQ1/de1  dQ1/df1    df1
雅可比矩阵为
dP1/de1  dP1/df1
dQ1/de1  dQ1/df1
计算雅可比矩阵的值
dP1/de1 = ∑(Gij*ej-Bij*fj)

通过潮流计算的到节点电压、电流，然后计算δ角，则可根据功角的定义计算Eq'和Ed’，然后进行负荷下微分方程计算
发电机方程和负荷方程通过它们的端电压和注入电流和网络方程联系起来。由于注入电流与注入功率有简单关系，
也可以认为发电机方程和负荷方程通过端电压和注入功率与网络方程联系起来。意味着它们的端电压和注入电流（注入功率）
不仅与发电机及负荷内部的暂态过程有关，而且与整个电力网络的运行状态有关。

之前的理解存在一个误区，即认为潮流计算的节点分为PQ节点或者PV节点，那么与网络方程只能通过PQ或者PV交流。
实际上所谓的PQ和PV节点只是改变了潮流计算方程的计算格式，最终的结果都是计算电压、电流、功率。
那么对于微分方程而言，与网络方程的接口是U和I，潮流计算的最终结果也是U和I，因此就对应上了。潮流计算的PQ和PV节点只是约束了结算的格式，
并不会对结果有影响。
求解过程：
(1)利用网络方程计算的y(t)代入微分方程dx/dt = phi[x(t),y(t)] 求出x(t+δt)，
(2)x(t+δt)代入网络方程求解0=F(x(t+δt),y),求出y(t+δt)，
(3)进入下一轮迭代，将y(t+δt)代入微分方程求解，直到两次迭代的y基本一致，本步长迭代计算结束。
(4)进入下一步长计算。
现在的问题是第(2)步中，代入的网络方程中需要有x才行， 如果不含x那么微分方程到网络方程就没法迭代了。

动态方程求解中的网络方程是潮流方程吗？潮流计算的意义只是为了求初值吧，求完初值后潮流计算就完成了使命，
动态下不能再次利用潮流方程了，并且与微分方程接口的网络方程并非再利用潮流计算的结构。
以发电机节点为例，发电机侧注入网络的电流是由发电机电势和接口电压来决定的，同样的网络中的电流也需要满足全网络的节点电压方程。
通过将这两个方程联立消除发电机节点的实际电流，改变网络方程的结构。
1、首先通过潮流计算得到Ug和Ig，然后计算微分方程得到Eq'(t+δt)。
2、接着改变网络方程的Y矩阵的形式(新的Y阵还是转角δ的函数)
3、计算新的I'xg(t+δt)和I'yg(t+δt)，解算新的Uxg(t+δt)和Uyg(t+δt)。
4、利用原始的网络方程或者发电机侧的电压平衡方程(推荐)计算Ixg(t+δt)和Iyg(t+δt)。
5、进入下一步迭代，将Ig(t+δt)、Ug(t+δt)代入微分方程求解，直到迭代的Ig、Ug基本一致，本步长迭代计算结束。
6、进入下一步长计算。


'''
from sympy import Symbol, symbols
from sympy.abc import x, y

expr = 2*x + 5*y
print(expr)

a = Symbol('a')
b = Symbol('b')

expr2 = a*b + a - b
print(expr2)

i, j = symbols('i j')
expr3 = 2*i*j + i*j
print(expr3) 